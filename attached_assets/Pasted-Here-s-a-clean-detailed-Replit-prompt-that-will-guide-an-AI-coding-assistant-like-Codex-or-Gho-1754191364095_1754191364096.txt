Here's a **clean, detailed Replit prompt** that will guide an AI coding assistant (like Codex or Ghostwriter) to make the blog system on your portfolio site work **exactly** the way you want‚Äîwhile keeping the design consistent and URLs clean for GitHub Pages.

---

### ‚úÖ Replit Prompt for Blog Integration into Portfolio Site

> **Prompt:**

I have a portfolio website deployed on GitHub Pages at `https://sanketmuchhala.github.io/`. It uses HTML, CSS, JavaScript, and a ribbon.js background. I want to add a **blog section** with the following detailed behavior:

---

### üß© STRUCTURE & FUNCTIONALITY:

1. **Blog Section on Homepage:**

   * I already have blog post cards on the homepage with a **"Read More"** button.
   * When a user clicks "Read More", they should be **redirected** to a dedicated page for that blog post.
   * Each blog post should open **in full screen** with the same look and feel (theme, font, layout) as the main site.

2. **Blog Post Pages:**

   * Each blog post should be a **separate HTML page**, e.g.:

     ```
     sanketmuchhala.github.io/blogs/playing-with-llm.html
     sanketmuchhala.github.io/blogs/ai-in-education.html
     ```
   * These blog post pages should use the same header, footer, and styles as the main site (include existing CSS and JS).
   * Add navigation links back to the homepage and blog index.

3. **Blog Index Page:**

   * Create a central blog index page at:

     ```
     sanketmuchhala.github.io/blogs/
     ```
   * It should display all blogs as cards with title, date, description, and a **"Read More"** button.
   * This page should be dynamically updatable (either manually with HTML or via JSON and JS if needed).
   * All blog links must follow clean SEO-friendly slugs (`playing-with-llm.html`, etc.)

4. **Design Consistency:**

   * All blog pages must inherit the **same theme, background (ribbon.js), fonts, buttons**, and responsive layout as the main site.
   * Use existing CSS and JS from the main site to avoid code duplication.

5. **Efficiency:**

   * Keep everything static (no backend) since it‚Äôs deployed on GitHub Pages.
   * If possible, make it easy to create new blog posts by duplicating a `blog-template.html` and updating metadata like title, slug, date, etc.

---

### üí° BONUS (If Possible):

* Add a metadata section at the top of each blog (date, read time, tags).
* Add basic smooth animations when transitioning from blog cards to blog pages.
* Include share buttons for LinkedIn, Twitter, etc. at the end of each blog post.

---

### ‚ö†Ô∏è IMPORTANT:

* **Do not break the existing homepage or resume download functionality.**
* Do not change the ribbon.js background.
* Do not hardcode internal links with `.com`‚Äîuse relative links for GitHub Pages compatibility.

---

### üìÅ Folder Structure Suggested:

```
/index.html
/blogs/
  ‚îú‚îÄ‚îÄ index.html         ‚Üê blog listing page
  ‚îú‚îÄ‚îÄ blog-template.html ‚Üê a reusable template
  ‚îú‚îÄ‚îÄ playing-with-llm.html
  ‚îú‚îÄ‚îÄ ai-in-education.html
/css/
/js/
/images/
```

---

Once you have this scaffold, I can help you automate creating new blog pages or make a script to generate them with titles and slugs.

Would you like a blog template HTML file created next?
